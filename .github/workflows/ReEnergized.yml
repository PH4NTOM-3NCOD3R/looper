name: EnergizedProtection Update

on:
  workflow_dispatch:
  schedule:
    # Runs at 02:00 UTC on roughly every 4th day of every month
    - cron: '0 2 1,5,9,13,17,21,25,29 1-12 ?'

jobs:
  release:
    runs-on: ubuntu-22.04

    steps:
      - name: Set Git Configs & Secrets
        uses: rokibhasansagar/custom_workflows/git_config@main
        with:
          credential: "yes"
        env:
          PAT: ${{ secrets.GH_TOKEN }}
      - name: Release Update
        run: |
          echo "::group:: [+] Cloning EnergizedProtection/block"
          git clone --quiet --filter=blob:none https://github.com/ZeoRexDevs/EnergizedProtection-block ~/block
          git -C ~/block reset --quiet --hard 0065b86
          git -C ~/block reflog expire --expire=now --all
          git -C ~/block gc --quiet --prune=now
          echo "::endgroup::"
          echo "::group:: [+] Preparing Mirror"
          # cd ~/block/assets/mirror && sh mirror.sh | tee ~/block/mirror.sh.log
          cd ~/block/assets/mirror && for f in *.tzst; do tar -xf ${f}; done | tee ~/block/mirror.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Preparing Filters"
          cd ~/block/assets/sources && sh filter.sh | tee ~/block/filter.sh.log
          cd ~/block/assets/mirror && for i in ut1-*.txt; do x=$(sed 's/ut1/prigent/g' <<<"${i}") && cp ${i} ~/block/assets/sources/filter/${x}; done
          echo "::endgroup::"
          echo "::group:: [+] Building spark Protection"
          cd ~/block/spark && sh build.sh | tee ~/block/spark.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building bluGo Protection"
          cd ~/block/bluGo && sh build.sh | tee ~/block/bluGo.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building blu Protection"
          cd ~/block/blu && sh build.sh | tee ~/block/blu.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building basic Protection"
          cd ~/block/basic && sh build.sh | tee ~/block/basic.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building porn Protection"
          cd ~/block/porn && sh build.sh | tee ~/block/porn.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building ultimate Protection"
          cd ~/block/ultimate && sh build.sh | tee ~/block/ultimate.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building unified Protection"
          cd ~/block/unified && sh build.sh | tee ~/block/unified.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building porn-lite Extension"
          cd ~/block/extensions/porn-lite && sh build.sh | tee ~/block/ext.porn-lite.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building regional Extension"
          cd ~/block/extensions/regional && sh build.sh | tee ~/block/ext.regional.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building social Extension"
          cd ~/block/extensions/social && sh build.sh | tee ~/block/ext.social.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building ips Extension"
          cd ~/block/extensions/ips && sh build.sh | tee ~/block/ext.ips.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Building xtreme Extension"
          cd ~/block/extensions/xtreme && sh build.sh | tee ~/block/ext.xtreme.build.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Preparing README"
          cd ~/block/assets/readme && sh readme.sh | tee ~/block/readme.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Preparing VERSION"
          cd ~/block/assets && sh version.sh | tee ~/block/version.sh.log
          echo "::endgroup::"
          echo "::group:: [+] Release Update"
          cd ~/block
          RelVer=$(grep "Build Version" ~/block/VERSION.md | awk '{print $NF}')
          git add README.md VERSION.md {basic,blu,bluGo,porn,spark,ultimate,unified}/formats/ extensions/{ips,porn-lite,regional,social,xtreme}/formats/
          git commit -q -as -m "Release Version v${RelVer}"
          git push -f origin master
          echo "::endgroup::"

