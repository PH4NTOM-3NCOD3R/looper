name: Mangadex CI

on:
  workflow_dispatch:
    inputs:
      MangadexURL:
        description: "Mangadex Full URL"
        required: true
        type: string
      ChapterRange:
        description: "Range of Chapters"
        required: false
        type: string
      ScanlatorGroup:
        description: "Specific Scanlator Group ID"
        required: false
        type: string
      GenRaw:
        description: "Generate Raw (optimum)"
        required: false
        type: boolean
        default: true
      GenRawComp:
        description: "Generate Compressed Raw"
        required: false
        type: boolean
        default: false
      GenRawVol:
        description: "Generate Raw Volume"
        required: false
        type: boolean
        default: false
      GenPDF:
        description: "Generate PDF"
        required: false
        type: boolean
        default: false
      GenPDFVol:
        description: "Generate PDF Volume"
        required: false
        type: boolean
        default: false

env:
  MDx_Location: "MDx_Uploads"
  MangadexURL: ${{ github.event.inputs.MangadexURL }}
  ChapterRange: ${{ github.event.inputs.ChapterRange }}
  ScanlatorGroup: ${{ github.event.inputs.ScanlatorGroup }}
  GenRaw: ${{ github.event.inputs.GenRaw }}
  GenRawComp: ${{ github.event.inputs.GenRawComp }}
  GenRawVol: ${{ github.event.inputs.GenRawVol }}
  GenPDF: ${{ github.event.inputs.GenPDF }}
  GenPDFVol: ${{ github.event.inputs.GenPDFVol }}

jobs:
  prepare:
    name: Prepare Dex Matrix
    runs-on: ubuntu-22.04

    outputs:
      MangaName: ${{ steps.set-params.outputs.MangaName }}
      MangaNameX: ${{ steps.set-params.outputs.MangaNameX }}
      MangaNameY: ${{ steps.set-params.outputs.MangaNameY }}
      matrix: ${{ steps.set-params.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - name: Create EncMatrix
        id: set-params
        run: |
          # Generate MangaName
          MangaNameX=$(curl -sL --retry 8 --retry-connrefused --retry-delay 2 "${MangadexURL}" | grep 'property="og:title"' | awk -F'content="' '{print $2}' | awk -F' - MangaDex"' '{print $1}' | sed 's/&#39;/'\''/g')
          MangaNameY="${MangaNameX//[\'\,\!\?\~]/}"
          MangaNameY="${MangaNameY//[^[:alnum:]]/.}"
          export MangaName=$(sed 's/\.\.\././g;s/\.\././g;s/\.$//g' <<<"${MangaNameY}")
          if [[ -z ${MangaName} ]]; then
            echo -e "Fatal Error! MangaName Variable is Empty." && exit 1
          fi
          echo "MangaNameX=${MangaNameX}" >> $GITHUB_OUTPUT
          echo "MangaNameY=${MangaNameY}" >> $GITHUB_OUTPUT
          echo "MangaName=${MangaName}" >> $GITHUB_OUTPUT
          echo -e "MangaName == ${MangaName}"
          if [[ ${GenRaw} == 'true' ]]; then
            export input_matrix="{\"format\":\"raw\",\"compressed\":\"false\"}"
          fi
          if [[ ${GenRawComp} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix="{\"format\":\"raw\",\"compressed\":\"true\"}"
          fi
          if [[ ${GenRawVol} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"raw-volume\",\"compressed\":\"true\"},{\"format\":\"raw-volume\",\"compressed\":\"false\"}"
          fi
          if [[ ${GenPDF} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"pdf\",\"compressed\":\"true\"}"
          fi
          if [[ ${GenPDFVol} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"pdf-volume\",\"compressed\":\"true\"}"
          fi
          export matrix={\"include\":[${input_matrix}]}
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  dexloader:
    name: Mangadex Downloader
    if: ( !cancelled() || success() )
    runs-on: ubuntu-22.04
    needs: prepare

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    env:
      MangaName: ${{ needs.prepare.outputs.MangaName }}
      MangaNameX: ${{ needs.prepare.outputs.MangaNameX }}
      MangaNameY: ${{ needs.prepare.outputs.MangaNameY }}
      format: ${{ matrix.format }}
      compressed: ${{ matrix.compressed }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - name: Set Git Configs & Secrets
        uses: rokibhasansagar/custom_workflows/git_config@main
        with:
          credential: "yes"
          git_cookies: "no"
        env:
          PAT: ${{ secrets.GH_TOKEN }}
      - name: Setup Rclone for Later Use
        uses: rokibhasansagar/custom_workflows/setup_rclone@main
        env:
          RCLONE_CONFIG_HASH: ${{ secrets.RCLONE_CONFIG_HASH }}
      - name: Prepare tools
        run: |
          # Prepare Downloader
          python3 -m pip install -U pip
          python3 -m pip install mangadex-downloader[optional]
          mangadex-dl --update 2>/dev/null || true
      - name: Manga Downloader Task
        run: |
          # Prepare Vars
          if [[ ${ScanlatorGroup} != '' ]]; then
            export GroupOpts="--group ${ScanlatorGroup}"
          else
            export GroupOpts="--no-group-name"
          fi
          if [[ ${compressed} == 'false' ]]; then
            export ImageQuality="High" ImgQOpts=""
          elif [[ ${compressed} == 'true' ]]; then
            export ImageQuality="Compressed" ImgQOpts="--use-compressed-image"
          fi
          echo "ImageQuality=${ImageQuality}" >>${GITHUB_ENV}
          if [[ ${ChapterRange} != "" ]]; then
            export ChapOpts="--start-chapter ${ChapterRange%-*} --end-chapter ${ChapterRange#*-}"
          fi
          echo "::group:: [+] Download Task"
          mkdir -p ~/data/${MangaName} ~/mangadex/
          cd ~/mangadex
          # Blacklist MangaPlus Group as they are just Redirect Links
          export MANGADEXDL_GROUP_BLACKLIST="4f1de6a2-f0c5-4ac5-bce5-02c7dbb67deb"
          mangaLoader() {
            mangadex-downloader "${MangadexURL}" --force-https --language "en" --no-track --no-oneshot-chapter --progress-bar-layout "none" --cover "original" ${ImgQOpts} ${ChapOpts:-} ${GroupOpts} --save-as ${format} --use-chapter-title "$@"
          }
          mangaLoader 2>&1 | tee -a /tmp/mangaLoader.log
          if [[ $(tail -n20 /tmp/mangaLoader.log | grep -i "Download finished") ]]; then
            echo -e "[i] Download Operation Successfull."
          else
            sleep 2s && echo -e "\nRETRYING..."
            rm /tmp/mangaLoader.log
            mangaLoader --log-level "DEBUG" --replace 2>&1 | tee -a /tmp/mangaLoader.log
          fi
          cd "${MangaNameX}" 2>/dev/null || { cd "${MangaNameX:0:1}"* 2>/dev/null || cd ${MangaNameX%% *}*; }
          mv -f * ~/data/${MangaName}/ 2>/dev/null || true
          cd ..
          echo "::endgroup::"
          if [[ ${format} == "raw"* ]]; then
            echo "::group:: âˆ† Pack Raw Images into zstd-compressed tar archives"
            cd ~/data/${MangaName}/
            rm *.db *.json 2>/dev/null || true
            printf "Total Size of the Images is - %s\n\n" "$(du -sh . | awk '{print $1}')"
            for i in *; do
              if [[ -d "${i}" ]]; then
                pushd "${i}" &>/dev/null
                ( tar -I'zstd -9 --long -T2' -cf ../"${i}".tzst * && sleep 0.1s; )
                echo -e "Compressed Images into ${i}.tzst"
                popd &>/dev/null
                rm -rf "${i}"
              fi
            done
            echo "::endgroup::"
          fi
      - name: Manga Upload Task
        run: |
          cd ~/data/
          echo "::group:: [i] Debug Details"
          printf "Total Size of the Upload will be %s\n\n" "$(du -sh ${MangaName} | awk '{print $1}')"
          printf "Contents of the Manga...\n\n"
          tree -h -L 2 ${MangaName}/
          echo "::endgroup::"
          echo "::group:: [+] Manga Upload Task"
          printf "Please wait a few minutes till everything gets uploaded...\n"
          rclone --quiet copy ${MangaName}/ "ms365:Public/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/" --retries 6 --retries-sleep 5s --tpslimit 120 --transfers 4 --fast-list && printf "Upload Done\n"
          echo -e "Use rclone at \"ms365:Public/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/\" to download them."
          echo "::endgroup::"
