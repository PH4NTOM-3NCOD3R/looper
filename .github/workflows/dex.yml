name: Mangadex CI

on:
  workflow_dispatch:
    inputs:
      MangadexURL:
        description: "Mangadex URL"
        required: true
        type: string
      ChapterRange:
        description: "Dash-delimited Range of Chapters"
        required: false
        type: string
      GenComp:
        description: "Generate Compressed Tachiyomi"
        required: true
        type: boolean
        default: true
      GenPDF:
        description: "Generate PDF"
        required: false
        type: boolean
        default: false
      GenCB7:
        description: "Generate CB7"
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - ImageQuality: "High"
          SaveAs: "tachiyomi"
        - ImageQuality: "Compressed"
          SaveAs: "tachiyomi"
        - ImageQuality: "Compressed"
          SaveAs: "pdf"
        - ImageQuality: "Compressed"
          SaveAs: "cb7"

    env:
      MDx_Location: "MDx_Uploads"
      ImageQuality: ${{ matrix.ImageQuality }}
      SaveAs: ${{ matrix.SaveAs }}
      GenPDF: ${{ github.event.inputs.GenPDF }}
      GenCB7: ${{ github.event.inputs.GenCB7 }}

    steps:
      - uses: actions/checkout@main

      - name: Prepare tools
        env:
          RCLONE_INSTALL_MIRROR: ${{ secrets.RCLONE_INSTALL_MIRROR }}
          RCLONE_CONFIG_URL: ${{ secrets.RCLONE_CONFIG_URL }}
        run: |
          [[ ${SaveAs} == 'pdf' && ${GenPDF} == 'false' ]] && exit 0
          [[ ${SaveAs} == 'cb7' && ${GenCB7} == 'false' ]] && exit 0
          curl -sL "${RCLONE_INSTALL_MIRROR}" | sudo bash
          mkdir -p ~/.config/rclone
          curl -sL "${RCLONE_CONFIG_URL}" >~/.config/rclone/rclone.conf
          git clone -q --filter=blob:none https://github.com/mansuf/mangadex-downloader.git -b v1.1.0
          cd mangadex-downloader
          sudo -EH python3 setup.py install
          cd ..
          sudo rm -rf mangadex-downloader
          if [[ ${SaveAs} == "pdf" ]]; then
            python3 -m pip install -U Pillow
          elif [[ ${SaveAs} == "cb7" ]]; then
            python3 -m pip install -U py7zr
          fi
      - name: Manga Downloader Task
        env:
          MangadexURL: ${{ github.event.inputs.MangadexURL }}
          ChapterRange: ${{ github.event.inputs.ChapterRange }}
        run: |
          [[ ${SaveAs} == 'pdf' && ${GenPDF} == 'false' ]] && exit 0
          [[ ${SaveAs} == 'cb7' && ${GenCB7} == 'false' ]] && exit 0
          MangaName=$(curl -sL "${MangadexURL}" | grep 'property="og:title"' | awk -F'content="' '{print $2}' | awk -F' - MangaDex"' '{print $1}')
          export MangaName=$(sed 's/[!?.]$//g;s/[!?.]$//g' <<<${MangaName})
          echo "MangaName=${MangaName}" >>${GITHUB_ENV}
          mkdir -p mangadex && cd mangadex
          if [[ ${ImageQuality} == "High" ]]; then
            export ImgQOpts=""
          elif [[ ${ImageQuality} == "Compressed" ]]; then
            export ImgQOpts="--use-compressed-image"
          fi
          if [[ ${SaveAs} == "tachiyomi" ]]; then
            if ! rclone lsf "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt"; then
              echo "This is a Dummy File" >/tmp/dummy.txt
              rclone copyto /tmp/dummy.txt "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt"
            fi
          fi
          echo "::group:: [+] Download Task"
          if [[ ${ChapterRange} != "" ]]; then
            export ChapOpts="--start-chapter ${ChapterRange%-*} --end-chapter ${ChapterRange#*-}"
          fi
          mangadex-downloader "${MangadexURL}" --verbose --language "en" --cover "original" ${ImgQOpts} ${ChapOpts} --save-as ${SaveAs} --use-chapter-title --no-group-name --enable-legacy-sorting --unsafe
          if [[ $? -ne 0 ]]; then
            mangadex-downloader "${MangadexURL}" --verbose --language "en" --cover "original" ${ImgQOpts} ${ChapOpts} --save-as ${SaveAs} --use-chapter-title --no-group-name --enable-legacy-sorting --unsafe --replace
          fi
          cd ..
          [[ ${SaveAs} == "tachiyomi" ]] && rclone delete "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt" 2>/dev/null || true
          echo "::endgroup::"
      - name: Create tar.zstd Files from tachiyomi
        if: env.SaveAs == 'tachiyomi'
        run: |
          echo "::group:: âˆ† Compress Tachiyomi"
          cd mangadex/"${MangaName}" || cd mangadex/${MangaName%% *}*
          ls -lAog
          for i in *; do
            if [[ -d "${i}" ]]; then
              pushd "${i}"
              tar -I'zstd --ultra -22 --long -T2' -cf ../"${i}".tzst * && sleep 1s
              popd
              rm -rf "${i}"
            fi
          done
          echo "::endgroup::"
      - name: Upload Task
        run: |
          [[ ${SaveAs} == 'pdf' && ${GenPDF} == 'false' ]] && exit 0
          [[ ${SaveAs} == 'cb7' && ${GenCB7} == 'false' ]] && exit 0
          echo "::group:: [i] Debug Details"
          printf "Total Size of the Upload will be %s\n\n" "$(du -sh mangadex)"
          printf "Contents of the Manga...\n\n"
          tree -h -L 2 mangadex
          echo "::endgroup::"
          echo "::group:: [+] Manga Upload Task"
          printf "Please wait a few minutes till everything gets uploaded...\n"
          rclone copy mangadex/ td:/${MDx_Location}/${ImageQuality}_Quality/ --transfers 8 --fast-list && printf "Upload Done\n"
          echo -e "Go to: \"https://gdindex.fr3akyphantom.workers.dev/0:/${MDx_Location}/${ImageQuality}_Quality/\" and Navigate to: \"${MangaName}\" to download them."
          echo "::endgroup::"
