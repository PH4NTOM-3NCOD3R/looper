name: Mangadex CI

on:
  workflow_dispatch:
    inputs:
      MangadexURL:
        description: "Mangadex Full URL"
        required: true
        type: string
      ChapterRange:
        description: "Range of Chapters"
        required: false
        type: string
      ScanlatorGroup:
        description: "Specific Scanlator Group ID"
        required: false
        type: string
      GenRaw:
        description: "Generate Raw (optimum)"
        required: false
        type: boolean
        default: true
      GenRawVol:
        description: "Generate Raw Volume"
        required: false
        type: boolean
        default: false
      GenPDF:
        description: "Generate PDF"
        required: false
        type: boolean
        default: false
      GenPDFVol:
        description: "Generate PDF Volume"
        required: false
        type: boolean
        default: false
      GenCB7:
        description: "Generate CB7"
        required: false
        type: boolean
        default: false
      GenCB7Vol:
        description: "Generate CB7 Volume"
        required: false
        type: boolean
        default: false

env:
  MDx_Location: "MDx_Uploads"
  MangadexURL: ${{ github.event.inputs.MangadexURL }}
  ChapterRange: ${{ github.event.inputs.ChapterRange }}
  ScanlatorGroup: ${{ github.event.inputs.ScanlatorGroup }}
  GenRaw: ${{ github.event.inputs.GenRaw }}
  GenRawVol: ${{ github.event.inputs.GenRawVol }}
  GenPDF: ${{ github.event.inputs.GenPDF }}
  GenPDFVol: ${{ github.event.inputs.GenPDFVol }}
  GenCB7: ${{ github.event.inputs.GenCB7 }}
  GenCB7Vol: ${{ github.event.inputs.GenCB7Vol }}

jobs:
  prepare:
    name: Prepare Dex Matrix
    runs-on: ubuntu-22.04

    outputs:
      MangaName: ${{ steps.set-params.outputs.MangaName }}
      matrix: ${{ steps.set-params.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "main"
      - name: Create EncMatrix
        id: set-params
        run: |
          # Generate MangaName
          MangaName=$(curl -sL "${MangadexURL}" | grep 'property="og:title"' | awk -F'content="' '{print $2}' | awk -F' - MangaDex"' '{print $1}')
          MangaName=$(sed 's/[!?.~]$//g;s/[!?.~]//g;s/'\''//g;s/!//g' <<<"${MangaName}")
          export MangaName=$(sed 's/&#39;//g' <<<"${MangaName}")
          echo "MangaName=${MangaName}" >> $GITHUB_OUTPUT
          echo -e "MangaName == ${MangaName}"
          if [[ ${GenRaw} == 'true' ]]; then
            export input_matrix="{\"format\":\"raw\",\"compressed\":\"true\"},{\"format\":\"raw\",\"compressed\":\"false\"}"
          fi
          if [[ ${GenRawVol} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"raw-volume\",\"compressed\":\"true\"},{\"format\":\"raw-volume\",\"compressed\":\"false\"}"
          fi
          if [[ ${GenPDF} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"pdf\",\"compressed\":\"true\"}"
          fi
          if [[ ${GenPDFVol} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"pdf-volume\",\"compressed\":\"true\"}"
          fi
          if [[ ${GenCB7} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"cb7\",\"compressed\":\"true\"}"
          fi
          if [[ ${GenCB7Vol} == 'true' ]]; then
            [[ ${input_matrix} != "" ]] && export input_matrix+=","
            export input_matrix+="{\"format\":\"cb7-volume\",\"compressed\":\"true\"}"
          fi
          export matrix={\"include\":[${input_matrix}]}
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  dexloader:
    name: Mangadex Downloader
    runs-on: ubuntu-22.04
    needs: prepare

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    env:
      MangaName: ${{ needs.prepare.outputs.MangaName }}
      format: ${{ matrix.format }}
      compressed: ${{ matrix.compressed }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: "main"
      - name: Set Git Configs & Secrets
        uses: rokibhasansagar/custom_workflows/git_config@main
        with:
          credential: "yes"
          git_cookies: "no"
        env:
          PAT: ${{ secrets.GH_TOKEN }}
      - name: Prepare tools
        env:
          RCLONE_CONFIG_URL: ${{ secrets.RCLONE_CONFIG_URL }}
        run: |
          # Prepare Rclone
          curl -sL "https://gist.github.com/rokibhasansagar/7a9838ac5410d70f829eddb230779342/raw/fb6642fcc0d0101e5c95965802ca57944df2ead4/xToolsetup.sh" -O
          sed -i 's|ftools\s||g' ./xToolsetup.sh
          bash ./xToolsetup.sh && rm ./xToolsetup.sh
          export PATH="/home/runner/EncToolZ/ftools/usr/bin:/home/runner/EncToolZ/rtools/usr/bin:${PATH}"
          echo "/home/runner/EncToolZ/rtools/usr/bin" >>${GITHUB_PATH}
          # Prepare Downloader
          cd `mktemp -d`
          wget -q "https://ftp.gnu.org/gnu/freefont/freefont-ttf-20120503.zip"
          unzip -q -j freefont-ttf-20120503.zip
          sudo mkdir -p /usr/share/fonts/truetype/freefont/ && sudo mv *.ttf /usr/share/fonts/truetype/freefont/
          cd - &>/dev/null
          fc-cache -r &>/dev/null
          python3 -m pip install -U pip
          python3 -m pip install mangadex-downloader[optional]
          mangadex-dl --update 2>/dev/null || true
      - name: Manga Downloader Task
        run: |
          # Prepare Vars
          if [[ ${ScanlatorGroup} != '' ]]; then
            export GroupOpts="--group ${ScanlatorGroup}"
          fi
          if [[ ${compressed} == 'false' ]]; then
            export ImageQuality="High" ImgQOpts=""
          elif [[ ${compressed} == 'true' ]]; then
            export ImageQuality="Compressed" ImgQOpts="--use-compressed-image"
          fi
          echo "ImageQuality=${ImageQuality}" >>${GITHUB_ENV}
          if [[ ${ChapterRange} != "" ]]; then
            export ChapOpts="--start-chapter ${ChapterRange%-*} --end-chapter ${ChapterRange#*-}"
          fi
          if [[ ${format} == "raw"* ]]; then
            if ! rclone lsf "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt" 2>/dev/null; then
              echo "This is a Dummy File" >/tmp/dummy.txt
              rclone copyto /tmp/dummy.txt "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt"
            fi
          fi
          echo "::group:: [+] Download Task"
          mkdir -p mangadex && cd mangadex
          # Blacklist MangaPlus Group as they are just Redirect Links
          export MANGADEXDL_GROUP_BLACKLIST="4f1de6a2-f0c5-4ac5-bce5-02c7dbb67deb"
          mangadex-downloader "${MangadexURL}" --language "en" --cover "original" ${ImgQOpts} ${ChapOpts:-} ${GroupOpts} --save-as ${format} --use-chapter-title --no-group-name || {
            sleep 5s
            mangadex-downloader "${MangadexURL}" --language "en" --cover "original" ${ImgQOpts} ${ChapOpts:-} ${GroupOpts} --save-as ${format} --use-chapter-title --no-group-name --replace 2>/dev/null || true
          }
          echo "::endgroup::"
          if [[ ${format} == "raw"* ]]; then
            rclone delete "td:/${MDx_Location}/${ImageQuality}_Quality/${MangaName}/dummy.txt" 2>/dev/null || true
            echo "::group:: âˆ† Pack Raw Images into zstd-compressed tar archives"
            cd "${MangaName:0:1}"* 2>/dev/null || cd ${MangaName%% *}*
            du -sh .
            for i in *; do
              if [[ -d "${i}" ]]; then
                pushd "${i}" &>/dev/null
                tar -I'zstd --ultra -22 --long -T2' -cf ../"${i}".tzst * && sleep 0.5s
                popd &>/dev/null
                rm -rf "${i}"
              fi
            done
            echo "::endgroup::"
          fi
      - name: Manga Upload Task
        run: |
          cd mangadex
          [[ -f "${MangaName}"/details.json ]] && rm "${MangaName}"/details.json 2>/dev/null || true
          cd ..
          echo "::group:: [i] Debug Details"
          printf "Total Size of the Upload will be %s\n\n" "$(du -sh * | awk '{print $1}')"
          printf "Contents of the Manga...\n\n"
          tree -h -L 2 mangadex/
          echo "::endgroup::"
          echo "::group:: [+] Manga Upload Task"
          printf "Please wait a few minutes till everything gets uploaded...\n"
          rclone --quiet copy mangadex/ "td:/${MDx_Location}/${ImageQuality}_Quality/" --retries 5 --retries-sleep 5s --tpslimit 10 --drive-pacer-burst 20 --drive-pacer-min-sleep 2000ms --transfers 4 --fast-list && printf "Upload Done\n"
          echo -e "Go to: \"https://gdindex.fr3akyphantom.workers.dev/0:/${MDx_Location}/${ImageQuality}_Quality/\" and Navigate to: \"${MangaName}\" to download them."
          echo "::endgroup::"
