name: Mangadex CI

on:
  workflow_dispatch:
    inputs:
      MangadexURL:
        description: "Mangadex URL"
        required: true
        type: string
      ChapterRange:
        description: "Dash-delimited Range of Chapters"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        ImageQuality: ["High", "Compressed"]
        SaveAs: ["tachiyomi", "pdf", "cb7"]

    env:
      ImageQuality: ${{ matrix.ImageQuality }}
      SaveAs: ${{ matrix.SaveAs }}

    steps:
      - uses: actions/checkout@main

      - name: Prepare tools
        env:
          RCLONE_INSTALL_MIRROR: ${{ secrets.RCLONE_INSTALL_MIRROR }}
          RCLONE_CONFIG_URL: ${{ secrets.RCLONE_CONFIG_URL }}
        run: |
          curl -sL "${RCLONE_INSTALL_MIRROR}" | sudo bash
          mkdir -p ~/.config/rclone
          curl -sL "${RCLONE_CONFIG_URL}" >~/.config/rclone/rclone.conf
          python3 -m pip install -U mangadex-downloader
          if [[ ${SaveAs} == "pdf" ]]; then
            python3 -m pip install -U Pillow
          elif [[ ${SaveAs} == "cb7" ]]; then
            python3 -m pip install -U py7zr
          fi
      - name: Manga Downloader Task
        env:
          MangadexURL: ${{ github.event.inputs.MangadexURL }}
          ChapterRange: ${{ github.event.inputs.ChapterRange }}
        run: |
          mkdir -p mangadex && cd mangadex
          if [[ ${ImageQuality} == "High" ]]; then
            export ImgQOpts=""
          elif [[ ${ImageQuality} == "Compressed" ]]; then
            export ImgQOpts="--use-compressed-image"
          fi
          echo "::group:: [+] Download Task"
          if [[ ${ChapterRange} != "" ]]; then
            export ChapOpts="--start-chapter ${ChapterRange%-*} --end-chapter ${ChapterRange#*-}"
          fi
          mangadex-dl "${MangadexURL}" --language "en" --cover "original" ${ImgQOpts} ${ChapOpts} --save-as ${SaveAs} --use-chapter-title --no-group-name --enable-legacy-sorting --unsafe
          if [[ $? -ne 0 ]]; then
            mangadex-dl "${MangadexURL}" --language "en" --cover "original" ${ImgQOpts} ${ChapOpts} --save-as ${SaveAs} --replace --use-chapter-title --no-group-name --enable-legacy-sorting --unsafe
          fi
          cd ..
          echo "::endgroup::"
          if [[ ${SaveAs} == "tachiyomi" ]]; then
            echo "::group:: âˆ† Compress Tachiyomi"
            cd mangadex/$(ls mangadex/ | cut -d' ' -f1)*
            export MangaName="${PWD##*/}"
            echo "MangaName=${MangaName}" >>${GITHUB_ENV}
            ls -lAog
            for i in *; do
              if [[ -d "${i}" ]]; then
                pushd "${i}"
                tar -I'zstd --ultra -22 --long -T2' -cf ../"${i}".tzst * && sleep 1s
                popd
                rm -rf "${i}"
              fi
            done
            echo "::endgroup::"
          fi
      - name: Debug Detail Phase (Ignore)
        run: |
          printf "Total Size of the Upload will be %s\n\n" "$(du -sh mangadex)"
          printf "Contents of the Manga...\n\n"
          tree -h -L 2 mangadex
      - name: Manga Upload Task
        run: |
          printf "Please wait a few minutes till everything gets uploaded...\n"
          rclone copy mangadex/ td:/MDx_UploadZ/${ImageQuality}_Quality/ --transfers 8 --fast-list && printf "Upload Done\n"
          echo -e "Go to: \"https://gdindex.fr3akyphantom.workers.dev/0:/MDx_UploadZ/${ImageQuality}_Quality/\" and Navigate to: \"${MangaName}\" to download them."
